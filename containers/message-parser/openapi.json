{"openapi": "3.0.2", "info": {"title": "PHDI Message Parser", "description": "## Getting Started with the DIBBs message parser\n\n### Introduction\nThe PHDI message parser is REST service for extracting desired fields from a given message. The service natively supports extracting values from the FHIR bundles, but it can support parsing Hl7v2 (eLR, VXU, ADT, etc...) and CDA(eCR) messages by first using the DIBBs FHIR converter to convert them to FHIR. Fields are extracted using a \"parsing schema\" which is simply a mapping in key:value format between desired field names (keys) and the FHIR paths inside a FHIR bundle where the values can be found. Simple of example of a schema for extracting patient first and last name from messages is shown below.\n\n\n```\n{\n    \"first_name\":\"Bundle.entry.resource.where(resourceType = 'Patient').name.first().given.first()\",\n    \"last_name\":\"Bundle.entry.resource.where(resourceType = 'Patient').name.first().family\",\n}\n```\n\n### Running the message parser\n\nThe message parser can be run using Docker (or any other OCI container runtime e.g. Podman), or directly from the Python sorce code.\n\n#### Running with Docker (Recommended)\n\nTo run the message parser with Docker follow these steps.\n1. Confirm that you have Docker installed by running `docker -v`. If you do not see a response similar what is shown below, follow [these instructions](https://docs.docker.com/get-docker/) to install Docker.\n```\n\u276f docker -v\nDocker version 20.10.21, build baeda1f\n``` \n2. Download a copy of the Docker image from the PHDI repository by running `docker pull ghcr.io/cdcgov/phdi/message-parser:main`.\n3. Run the service with ` docker run -p 8080:8080 message-parser:main`.\n\nCongradulations the FHIR Converter should now be running on `localhost:8080`!\n\n#### Running from Python Source Code\n\nWe recommend running the message parser from a container, but if that is not feasible for a given use-case, it may also be run directly from Python using the steps below.\n\n1. Ensure that both Git and Python 3.10 or higher are installed.\n2. Clone the PHDI repository with `git clone https://github.com/CDCgov/phdi`.\n3. Navigate to `/phdi/containers/message-parser/`.\n4. Make a fresh virtual environment with `python -m venv .venv`.\n5. Activate the virtual environement with `source .venv/bin/activate` (MacOS and Linux), `venv\\Scripts\\activate` (Windows Command Prompt), or `.venv\\Scripts\\Activate.ps1` (Windows Power Shell).\n5. Install all of the Python dependencies for the message parser with `pip install -r requirements.txt` into your virtual environment.\n6. Run the FHIR Converter on `localhost:8080` with `python -m uvicorn app.main:app --host 0.0.0.0 --port 8080`. \n\n### Building the Docker Image\n\nTo build the Docker image for the message parser from source instead of downloading it from the PHDI repository follow these steps.\n1. Ensure that both [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git) and [Docker](https://docs.docker.com/get-docker/) are installed.\n2. Clone the PHDI repository with `git clone https://github.com/CDCgov/phdi`.\n3. Navigate to `/phdi/containers/message-parser/`.\n4. Run `docker build -t message-parser .`.\n\n### The API \n\nWhen viewing these docs from the `/redoc` endpoint on a running instance of the message parser or the the PHDI website detailed documentation on the API will be avaiable below. ", "version": "0.0.1"}, "paths": {"/": {"get": {"summary": "Health Check", "description": "Check service status. If an HTTP 200 status code is returned along with\n'{\"status\": \"OK\"}' then the extraction service is available and running properly.", "operationId": "health_check__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/parse_message": {"post": {"summary": "Parse Message Endpoint", "description": "Extract the desired values values from a message. If the message is not already in\nFHIR format convert it to FHIR first.\n\n:param input: A JSON formated request body with schema specified by the\n    ParseMessageInput model.\n:return: A JSON formated response body with schema specified by the\n    ParseMessageResponse model.", "operationId": "parse_message_endpoint_parse_message_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ParseMessageInput"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ParseMessageResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/schemas": {"get": {"summary": "List Schemas", "description": "Get a list of all the parsing schemas currently available. Default schemas are ones\nthat are packaged by default with this service. Custom schemas are any additional\nschema that users have chosen to upload to this service.\n\n:return: A JSON formated response body with schema specified by the\n    ListSchemasResponse model.", "operationId": "list_schemas_schemas_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ListSchemasResponse"}}}}}}}, "/schemas/{parsing_schema_name}": {"get": {"summary": "Get Schema", "description": "Get the schema specified by 'parsing_schema_name'.\n\n:return: A JSON formated response body with schema specified by the\n    GetSchemaResponse model.", "operationId": "get_schema_schemas__parsing_schema_name__get", "parameters": [{"required": true, "schema": {"title": "Parsing Schema Name", "type": "string"}, "name": "parsing_schema_name", "in": "path"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/GetSchemaResponse"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}}, "components": {"schemas": {"GetSchemaResponse": {"title": "GetSchemaResponse", "required": ["message", "parsing_schema"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "A message describing the result of a request to the /parse_message endpoint."}, "parsing_schema": {"title": "Parsing Schema", "type": "object", "description": "A set of key:value pairs containing the values extracted from the message."}}, "description": "The schema for responses from the /schemas endpoint when a specific schema is\nqueried."}, "HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "ListSchemasResponse": {"title": "ListSchemasResponse", "required": ["default_schemas", "custom_schemas"], "type": "object", "properties": {"default_schemas": {"title": "Default Schemas", "type": "array", "items": {}, "description": "The schemas that ship with with this service by default."}, "custom_schemas": {"title": "Custom Schemas", "type": "array", "items": {}, "description": "Additional schemas that users have uploaded to this service beyond the ones come by default."}}, "description": "The schema for responses from the /schemas endpoint."}, "ParseMessageInput": {"title": "ParseMessageInput", "required": ["message_format", "message"], "type": "object", "properties": {"message_format": {"title": "Message Format", "enum": ["fhir", "hl7v2", "cda"], "type": "string", "description": "The format of the message."}, "message_type": {"title": "Message Type", "enum": ["ecr", "elr", "vxu"], "type": "string", "description": "The type of message that values will be extracted from. Required when 'message_format is not FHIR."}, "parsing_schema": {"title": "Parsing Schema", "type": "object", "description": "A schema describing which fields to extract from the message. This must be a JSON object with key:value pairs of the form <my-field>:<FHIR-to-my-field>.", "default": {}}, "parsing_schema_name": {"title": "Parsing Schema Name", "type": "string", "description": "The name of a schema that was previously loaded in the service to use to extract fields from the message.", "default": ""}, "fhir_converter_url": {"title": "Fhir Converter Url", "type": "string", "description": "The URL of an instance of the PHDI FHIR converter. Required when the message is not already in FHIR format.", "default": ""}, "credential_manager": {"title": "Credential Manager", "enum": ["azure", "gcp"], "type": "string", "description": "The type of credential manager to use for authentication with a FHIR converter when conversion to FHIR is required."}, "message": {"title": "Message", "anyOf": [{"type": "string"}, {"type": "object"}], "description": "The message to be parsed."}}, "description": "The schema for requests to the /extract endpoint."}, "ParseMessageResponse": {"title": "ParseMessageResponse", "required": ["message", "parsed_values"], "type": "object", "properties": {"message": {"title": "Message", "type": "string", "description": "A message describing the result of a request to the /parse_message endpoint."}, "parsed_values": {"title": "Parsed Values", "type": "object", "description": "A set of key:value pairs containing the values extracted from the message."}}, "description": "The schema for responses from the /extract endpoint."}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}}}